# -*- coding: utf-8 -*-
"""task1-grip internship

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uB7qKAk5LrL-v6ZoUqkappX_W-GjFkld

B S MATSYA MANIAN
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Sample data
hours_studied = np.array([2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,2.5,1.9,6.1,7.4,2.7,4.8,3.8,6.9,7.8])
student_scores = np.array([21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86])

# Reshape the data (needed when you have a single feature)
hours_studied = hours_studied.reshape(-1, 1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(hours_studied, student_scores, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the coefficients and intercept
coefficients = model.coef_
intercept = model.intercept_

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print the model coefficients and evaluation metrics
print("Coefficients:", coefficients)
print("Intercept:", intercept)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R-squared:", r2)

# Plot the regression line
plt.scatter(hours_studied, student_scores, label='Actual Data')
plt.plot(hours_studied, model.predict(hours_studied), color='red', label='Regression Line')
plt.xlabel('Hours Studied')
plt.ylabel('Student Scores')
plt.legend()
plt.show()

# Predict student percentage for a new number of hours
new_hours = np.array([[12]])  # Replace with the number of hours you want to predict
predicted_percentage = model.predict(new_hours)
print("Predicted Percentage for {} hours of study: {:.2f}%".format(new_hours[0][0], predicted_percentage[0]))

# Predict student percentage for 9.25 hours of study
new_hours = np.array([[9.25]])
predicted_percentage = model.predict(new_hours)
print("Predicted Percentage for 9.25 hours of study: {:.2f}%".format(predicted_percentage[0]))

hours_studied = np.array(hours_studied).reshape(-1, 1)

# Use the trained linear regression model to predict the percentages
predicted_percentages = model.predict(hours_studied)

# Print the predicted percentages for each student
for i, hours in enumerate(hours_studied):
    print("Student {}: Hours Studied = {:.2f}, Predicted Percentage = {:.2f}%".format(i + 1, hours[0], predicted_percentages[i]))